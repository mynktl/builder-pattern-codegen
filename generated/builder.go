/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package test

import "github.com/pkg/errors"

type volumeRollback struct {
	// destroy any more recent snapshots and bookmarks, as well as any clones of those snapshots. check diff b/w -R and -r
	shouldDestroy bool
	//forceunmount the file-system
	forceunmount bool
	// Destroy any snapshots and bookmarks more recent than the one specified.
	shouldDestroySnap bool
	// snapshot name
	snapshot string

	// predicatelist is list of predicate function used for validating object
	predicatelist []PredicateFunc

	// error
	err error
}

// NewvolumeRollback returns new instance of object volumeRollback
func NewvolumeRollback() *volumeRollback {
	return &volumeRollback{}
}

// WithCheck add given predicate to predicate list
func (v *volumeRollback) WithCheck(pred ...PredicateFunc) *volumeRollback {
	v.predicatelist = append(v.predicatelist, pred...)
	return v
}

// WithshouldDestroy method fills the shouldDestroy field of volumeRollback object.
func (v *volumeRollback) WithshouldDestroy(shouldDestroy bool) *volumeRollback {
	v.shouldDestroy = shouldDestroy
	return v
}

// Withforceunmount method fills the forceunmount field of volumeRollback object.
func (v *volumeRollback) Withforceunmount(forceunmount bool) *volumeRollback {
	v.forceunmount = forceunmount
	return v
}

// WithshouldDestroySnap method fills the shouldDestroySnap field of volumeRollback object.
func (v *volumeRollback) WithshouldDestroySnap(shouldDestroySnap bool) *volumeRollback {
	v.shouldDestroySnap = shouldDestroySnap
	return v
}

// Withsnapshot method fills the snapshot field of volumeRollback object.
func (v *volumeRollback) Withsnapshot(snapshot string) *volumeRollback {
	v.snapshot = snapshot
	return v
}

// Validate is to validate generated volumeRollback object by builder
func (v *volumeRollback) Validate() *volumeRollback {
	if len(v.predicatelist) != 0 {
		for _, pred := range v.predicatelist {
			if !pred(v) {
				errors.Wrapf(v.err, "Failed to run predicate {%v}", pred)
			}
		}
	}
	return v
}

// Build returns the volumeRollback object generated by builder
func (v *volumeRollback) Build() (*volumeRollback, error) {
	v = v.Validate()
	return v, v.err
}
